// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package regexmatcher.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class NextMatch extends CustomJavaAction<IMendixObject>
{
	private java.lang.String entity;

	public NextMatch(IContext context, java.lang.String entity)
	{
		super(context);
		this.entity = entity;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		Object contextObj = getContext().getData().get("RegexMatcher");
		if (contextObj == null || !(contextObj instanceof Matcher)) {
			throw new CoreException("Matcher not found, this action should be invoked from a RegexMatch microflow.");
		}
		Matcher m = (Matcher) contextObj;		
		
		// This is implemented because declared primitives are returned in a different order than declared within the model.
		Collection<? extends IMetaPrimitive> attributes = Core.getMetaObject(this.entity).getDeclaredMetaPrimitives();
		List<String> attributeNames = new LinkedList<String>();
		for (IMetaPrimitive attribute : attributes) {
			String name = attribute.getName();
			if (name.equalsIgnoreCase("createdBy") || name.equalsIgnoreCase("owner") ||
				name.equalsIgnoreCase("createdDate") || name.equalsIgnoreCase("changedDate")) {
				continue;
			}
			attributeNames.add(name);
		}
		Collections.sort(attributeNames);	
		
		if (!(m.find())) {
			return null;
		}

		IMendixObject result = Core.instantiate(getContext(), this.entity);
		int counter = 1;		// start at 1 as 0 is the entire match, we don't need this.
		for (String attributeName : attributeNames) {
			result.setValue(getContext(), attributeName, m.group(counter));
			counter++;
		}
		
		return result;		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "NextMatch";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
