// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package regexmatcher.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexMatch extends CustomJavaAction<IMendixObject>
{
	private java.lang.String regex;
	private java.lang.String input;
	private java.lang.String microflow;
	private IMendixObject microflowParameter;
	private java.lang.String returnEntity;
	private java.lang.Boolean useSystemContext;

	public RegexMatch(IContext context, java.lang.String regex, java.lang.String input, java.lang.String microflow, IMendixObject microflowParameter, java.lang.String returnEntity, java.lang.Boolean useSystemContext)
	{
		super(context);
		this.regex = regex;
		this.input = input;
		this.microflow = microflow;
		this.microflowParameter = microflowParameter;
		this.returnEntity = returnEntity;
		this.useSystemContext = useSystemContext;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		Pattern p = Pattern.compile(this.regex);
		Matcher m = p.matcher(this.input);

		IContext context = getContext();
		if (useSystemContext) {
			context = Core.createSystemContext();
		}
		Object result = null;
		
		try {
			context.getData().put("RegexMatcher", m);
			if (this.microflowParameter != null) {
				result = Core.execute(context, this.microflow, this.microflowParameter);
			} else {
				result = Core.execute(context, this.microflow);
			}
			
			if (useSystemContext) {
				while (context.isInTransaction())
					context.endTransaction();
			}
		} finally {

		}
		
		if (result != null && result instanceof IMendixObject) {
			return (IMendixObject) result;
		} else {		
			return null;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "RegexMatch";
	}

	// BEGIN EXTRA CODE
	public static ILogNode getLogger() {
		return Core.getLogger("RegexMatch");
	}
	// END EXTRA CODE
}
